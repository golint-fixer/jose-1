// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: google_claims.go
// DO NOT EDIT!

package jwt

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *GoogleClaims) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *GoogleClaims) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "iss":`)
	fflib.WriteJsonString(buf, string(mj.Issuer))
	buf.WriteString(`,"sub":`)
	fflib.WriteJsonString(buf, string(mj.Subject))
	buf.WriteString(`,"azp":`)
	fflib.WriteJsonString(buf, string(mj.AuthorizedParty))
	buf.WriteString(`,"aud":`)
	fflib.WriteJsonString(buf, string(mj.Audience))
	buf.WriteString(`,"iat":`)
	fflib.FormatBits2(buf, uint64(mj.IssuedAt), 10, mj.IssuedAt < 0)
	buf.WriteString(`,"exp":`)
	fflib.FormatBits2(buf, uint64(mj.ExpireAt), 10, mj.ExpireAt < 0)
	buf.WriteByte(',')
	if len(mj.Email) != 0 {
		buf.WriteString(`"email":`)
		fflib.WriteJsonString(buf, string(mj.Email))
		buf.WriteByte(',')
	}
	if mj.EmailVerified != false {
		if mj.EmailVerified {
			buf.WriteString(`"email_verified":true`)
		} else {
			buf.WriteString(`"email_verified":false`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Name) != 0 {
		buf.WriteString(`"name":`)
		fflib.WriteJsonString(buf, string(mj.Name))
		buf.WriteByte(',')
	}
	if len(mj.Picture) != 0 {
		buf.WriteString(`"picture":`)
		fflib.WriteJsonString(buf, string(mj.Picture))
		buf.WriteByte(',')
	}
	if len(mj.GivenName) != 0 {
		buf.WriteString(`"given_name":`)
		fflib.WriteJsonString(buf, string(mj.GivenName))
		buf.WriteByte(',')
	}
	if len(mj.FamilyName) != 0 {
		buf.WriteString(`"family_name":`)
		fflib.WriteJsonString(buf, string(mj.FamilyName))
		buf.WriteByte(',')
	}
	if len(mj.Locale) != 0 {
		buf.WriteString(`"locale":`)
		fflib.WriteJsonString(buf, string(mj.Locale))
		buf.WriteByte(',')
	}
	if len(mj.HostedDomain) != 0 {
		buf.WriteString(`"hd":`)
		fflib.WriteJsonString(buf, string(mj.HostedDomain))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_GoogleClaimsbase = iota
	ffj_t_GoogleClaimsno_such_key

	ffj_t_GoogleClaims_Issuer

	ffj_t_GoogleClaims_Subject

	ffj_t_GoogleClaims_AuthorizedParty

	ffj_t_GoogleClaims_Audience

	ffj_t_GoogleClaims_IssuedAt

	ffj_t_GoogleClaims_ExpireAt

	ffj_t_GoogleClaims_Email

	ffj_t_GoogleClaims_EmailVerified

	ffj_t_GoogleClaims_Name

	ffj_t_GoogleClaims_Picture

	ffj_t_GoogleClaims_GivenName

	ffj_t_GoogleClaims_FamilyName

	ffj_t_GoogleClaims_Locale

	ffj_t_GoogleClaims_HostedDomain
)

var ffj_key_GoogleClaims_Issuer = []byte("iss")

var ffj_key_GoogleClaims_Subject = []byte("sub")

var ffj_key_GoogleClaims_AuthorizedParty = []byte("azp")

var ffj_key_GoogleClaims_Audience = []byte("aud")

var ffj_key_GoogleClaims_IssuedAt = []byte("iat")

var ffj_key_GoogleClaims_ExpireAt = []byte("exp")

var ffj_key_GoogleClaims_Email = []byte("email")

var ffj_key_GoogleClaims_EmailVerified = []byte("email_verified")

var ffj_key_GoogleClaims_Name = []byte("name")

var ffj_key_GoogleClaims_Picture = []byte("picture")

var ffj_key_GoogleClaims_GivenName = []byte("given_name")

var ffj_key_GoogleClaims_FamilyName = []byte("family_name")

var ffj_key_GoogleClaims_Locale = []byte("locale")

var ffj_key_GoogleClaims_HostedDomain = []byte("hd")

func (uj *GoogleClaims) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *GoogleClaims) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_GoogleClaimsbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_GoogleClaimsno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_GoogleClaims_AuthorizedParty, kn) {
						currentKey = ffj_t_GoogleClaims_AuthorizedParty
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_GoogleClaims_Audience, kn) {
						currentKey = ffj_t_GoogleClaims_Audience
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_GoogleClaims_ExpireAt, kn) {
						currentKey = ffj_t_GoogleClaims_ExpireAt
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_GoogleClaims_Email, kn) {
						currentKey = ffj_t_GoogleClaims_Email
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_GoogleClaims_EmailVerified, kn) {
						currentKey = ffj_t_GoogleClaims_EmailVerified
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffj_key_GoogleClaims_FamilyName, kn) {
						currentKey = ffj_t_GoogleClaims_FamilyName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'g':

					if bytes.Equal(ffj_key_GoogleClaims_GivenName, kn) {
						currentKey = ffj_t_GoogleClaims_GivenName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'h':

					if bytes.Equal(ffj_key_GoogleClaims_HostedDomain, kn) {
						currentKey = ffj_t_GoogleClaims_HostedDomain
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_GoogleClaims_Issuer, kn) {
						currentKey = ffj_t_GoogleClaims_Issuer
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_GoogleClaims_IssuedAt, kn) {
						currentKey = ffj_t_GoogleClaims_IssuedAt
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_GoogleClaims_Locale, kn) {
						currentKey = ffj_t_GoogleClaims_Locale
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffj_key_GoogleClaims_Name, kn) {
						currentKey = ffj_t_GoogleClaims_Name
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_GoogleClaims_Picture, kn) {
						currentKey = ffj_t_GoogleClaims_Picture
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_GoogleClaims_Subject, kn) {
						currentKey = ffj_t_GoogleClaims_Subject
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_GoogleClaims_HostedDomain, kn) {
					currentKey = ffj_t_GoogleClaims_HostedDomain
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_GoogleClaims_Locale, kn) {
					currentKey = ffj_t_GoogleClaims_Locale
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_GoogleClaims_FamilyName, kn) {
					currentKey = ffj_t_GoogleClaims_FamilyName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_GoogleClaims_GivenName, kn) {
					currentKey = ffj_t_GoogleClaims_GivenName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_GoogleClaims_Picture, kn) {
					currentKey = ffj_t_GoogleClaims_Picture
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_GoogleClaims_Name, kn) {
					currentKey = ffj_t_GoogleClaims_Name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_GoogleClaims_EmailVerified, kn) {
					currentKey = ffj_t_GoogleClaims_EmailVerified
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_GoogleClaims_Email, kn) {
					currentKey = ffj_t_GoogleClaims_Email
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_GoogleClaims_ExpireAt, kn) {
					currentKey = ffj_t_GoogleClaims_ExpireAt
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_GoogleClaims_IssuedAt, kn) {
					currentKey = ffj_t_GoogleClaims_IssuedAt
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_GoogleClaims_Audience, kn) {
					currentKey = ffj_t_GoogleClaims_Audience
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_GoogleClaims_AuthorizedParty, kn) {
					currentKey = ffj_t_GoogleClaims_AuthorizedParty
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_GoogleClaims_Subject, kn) {
					currentKey = ffj_t_GoogleClaims_Subject
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_GoogleClaims_Issuer, kn) {
					currentKey = ffj_t_GoogleClaims_Issuer
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_GoogleClaimsno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_GoogleClaims_Issuer:
					goto handle_Issuer

				case ffj_t_GoogleClaims_Subject:
					goto handle_Subject

				case ffj_t_GoogleClaims_AuthorizedParty:
					goto handle_AuthorizedParty

				case ffj_t_GoogleClaims_Audience:
					goto handle_Audience

				case ffj_t_GoogleClaims_IssuedAt:
					goto handle_IssuedAt

				case ffj_t_GoogleClaims_ExpireAt:
					goto handle_ExpireAt

				case ffj_t_GoogleClaims_Email:
					goto handle_Email

				case ffj_t_GoogleClaims_EmailVerified:
					goto handle_EmailVerified

				case ffj_t_GoogleClaims_Name:
					goto handle_Name

				case ffj_t_GoogleClaims_Picture:
					goto handle_Picture

				case ffj_t_GoogleClaims_GivenName:
					goto handle_GivenName

				case ffj_t_GoogleClaims_FamilyName:
					goto handle_FamilyName

				case ffj_t_GoogleClaims_Locale:
					goto handle_Locale

				case ffj_t_GoogleClaims_HostedDomain:
					goto handle_HostedDomain

				case ffj_t_GoogleClaimsno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Issuer:

	/* handler: uj.Issuer type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Issuer = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Subject:

	/* handler: uj.Subject type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Subject = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AuthorizedParty:

	/* handler: uj.AuthorizedParty type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.AuthorizedParty = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Audience:

	/* handler: uj.Audience type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Audience = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IssuedAt:

	/* handler: uj.IssuedAt type=jwt.UnixTime kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for UnixTime", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.IssuedAt = UnixTime(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ExpireAt:

	/* handler: uj.ExpireAt type=jwt.UnixTime kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for UnixTime", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.ExpireAt = UnixTime(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Email:

	/* handler: uj.Email type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Email = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EmailVerified:

	/* handler: uj.EmailVerified type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.EmailVerified = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.EmailVerified = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Name:

	/* handler: uj.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Picture:

	/* handler: uj.Picture type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Picture = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_GivenName:

	/* handler: uj.GivenName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.GivenName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FamilyName:

	/* handler: uj.FamilyName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.FamilyName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Locale:

	/* handler: uj.Locale type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Locale = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_HostedDomain:

	/* handler: uj.HostedDomain type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.HostedDomain = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
